http://stackoverflow.com/questions/148747/what-is-the-difference-between-a-framework-and-a-library

The main difference betwen a Library and a Framework is the dependency betwen their own code,
in oder words to use a Framework you need to use almost all the classes, modules or code in the FW, 
but to use a Library you can use one or few classes, modules or code in the lib in your own application


Library:

It is just a collection of routines(functional programming) or class definitions(object oriented programming). 
The reason behind is simply code reuse, i.e. get the code that has already been written by other developers.
The classes or routines normally define specific operations in a domain specific area. 
For example, there are some libraries of mathematics which can let developer just call the function without redo the
implementation of how an algorithm works.

Framework:

In framework, all the control flow is already there, and there’s a bunch of predefined white spots that we 
should fill out with our code. A framework is normally more complex. It defines a skeleton where the application
defines its own features to fill out the skeleton. In this way, your code will be called by the framework when appropriately.
The benefit is that developers do not need to worry about if a design is good or not, but just about implementing
domain specific functions.


KeyDifference:

The key difference between a library and a framework is “Inversion of Control”. 
When you call a method from a library, you are in control.
But with a framework, the control is inverted: the framework calls you.

Relation:

Both of them defined API, which is used for programmers to use.
To put those together, we can think of a library as a certain function of an application, a framework as the skeleton of the
application, and an API is connector to put those together. A typical development process normally starts with a framework, 
and fill out functions defined in libraries through API.
